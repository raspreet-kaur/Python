https://stackabuse.com/python-nested-functions/

Closures and Factory Functions
All the examples we have seen till now just contain ordinary functions that have been nested inside other functions.
It is possible for us to write such functions in another way instead of nesting them inside other functions. 
We don't have a specific reason as to why we should nest them.
However, for the case of closures, one must use the nested functions.

We can bind/pass data to a function without necessarily passing the data to the function via parameters. 
This is done using a closure. It is a function object that is able to remember values in the enclosing scopes even when they are not
available in the memory. This means that we have a closure when a nested function references a value that is in its enclosing scope.

The purpose of a closure is to make the inner function remember the state of its environment when it is called, 
even if it is not in the memory. A closure is caused by an inner function, but it's not the inner function. 
The closure works by closing the local variable on the stack, which stays around after the creation of the stack has finished executing.

The following are the conditions that are required to be met in order to create a closure in Python:

There must be a nested function
The inner function has to refer to a value that is defined in the enclosing scope
The enclosing function has to return the nested function
Consider the following example:

def function1(name):
    def function2():
        print('Hello ' + name)
    return function2

func = function1('Nicholas')
func()

Output
Hello Nicholas

The above code demonstrates that with closures, we are able to generate and invoke a function from outside its scope via function passing.
The scope of function2() is only inside function1(). However, with the use of closures, it was possible for us to extend this scope 
and invoke it from outside its scope.
Inner functions help us in defining factory functions. A factory function is a function that creates another object. For example:

def power_generator(num):
    # Create the inner function
    def power_n(power):
        return num ** power
    return power_n

power_two = power_generator(2)
power_three = power_generator(3)
print(power_two(8))
print(power_three(4))
Output
256
81

In the script above, from the power_n(power) function, we have created two other objects, power_two and power_three.
This makes power_n(power) a factory function since it generates the power_two and power_three functions for us using the parameter we pass it.
